/*
28 de agosto de 2024
Vanessa Retegu√≠n - 375533

Actividad 5 - Pr√°ctica de Estados y Transiciones: Ejercicio 1

Universidad A√∫tonoma de Aguascalientes
Ingenier√≠a en Computaci√≥n Inteligente (ICI)
Semestre V

Grupo 5 - A
Aut√≥matas I
√Ångel Eduardo Villegas Ort√≠z

Instrucciones:

Ejercicio 1:

En una productora Aguacatera se establece que:

Existen dos calidades de aguacate, Premium y Est√°ndar.
El aguacate premium puede tener un peso alto y un peso bajo, los Aguacates
est√°ndar con peso bajo se clasifican en la misma categor√≠a que los Premium. Por
√∫ltimo, los Aguacates est√°ndar que no obtienen el peso bajo se descartan.

Requerimientos:
-Genere un mecanismo para contener la expresi√≥n en el lenguaje de programaci√≥n
seleccionado para que el usuario ingrese el estado y la transici√≥n: . -Ofrezca
en consola su nomenclatura de Estados y Transiciones:

Por ejemplo:
Estado Inicial: q0
Posibles se√±ales de Entrada:
X: Premium, Y: Est√°ndar,
a=Peso Alto
b=Peso Bajo,c=Descartes.
Estados Posibles: q0, q1, q2, q3, q4, q5

-Implemente una funci√≥n Transicion que reciba como par√°metro del usuario el
Estado Actual (qn) y un valor de entrada (a) y retorne el estado que se adec√∫a a
la l√≥gica del ejercicio. -Implemente una funci√≥n ReporteEstado que reciba como
par√°metro un Estado (qn) obtenido de la funci√≥n Transicion. Indique en consola
la clasificaci√≥n del tomate como Premium o Est√°ndar y Peso Alto, Peso Bajo o
Descarte en funci√≥n del estado recibido. -En la funci√≥n main muestre la
transici√≥n solicitada por el usuario en la notaci√≥n m√°s parecida posible y
despliegue el estado resultado, as√≠ como su clasificaci√≥n.
*/

/* ------------ Resources / Documentation involved ------------- */

/* ------------------------- Libraries ------------------------- */
#include <iostream> /* cin/cout */

using namespace std;

/* ------------------------- Functions ------------------------- */
void displayAguacate() {
    cout
        << endl
        << "\n      ‚°Ä        ‚†§       "
           "\n     ‚†à‚†Å‚¢Ä‚°†‚†í‚†à‚†â‚†ê‚†¢‚£Ñ‚°Ä      "
           "\n      ‚¢†‚†ã      ‚†à‚¢ø‚¢Ü      "
           "\n   ‚†Ñ ‚¢Ä‚†É        ‚†ò‚°à‚¢á        ___                          __        "
           "       ____ ___  ___  ___ "
           "\n     ‚°å          ‚°á‚°å‚°Ñ ‚†à‚†Å   / _ |___ ___ _____ ________ _/ /____ "
           "_______  |_  // _ \\/ _ \\/ _ \\"
           "\n    ‚°ê    ‚°Ä ‚°Ä    ‚¢ø‚£•‚°á     / __ / _ `/ // / _ `/ __/ _ `/ __/ -_) "
           "__/ _ \\_/_ </ // / // / // /"
           "\n‚£Ä‚°Ä ‚°∞   ‚°∞‚†ä  ‚¢à‚†¢‚°Ä  ‚†ò‚£è‚£ø‚°Ä   /_/ |_\\_, "
           "/\\_,_/\\_,_/\\__/\\_,_/\\__/\\__/_/  \\___/____/\\___/\\___/\\___/"
           "\n‚†à‚†Å‚°†‚†Ö‚°Ñ ‚°ú‚†∏‚†∂‚£∂‚†Ü‚†æ ‚¢∞‚°Ä ‚°†‚¢∏‚£ø‚°á ‚¢†‚°Ä     /___/                                "
           "                     "
           "\n ‚¢å‚††‚°ñ‚†Å ‚°á      ‚£¨‚†á ‚†±‚¢Ä‚†ô‚°á   "
           "\n   ‚†±‚°Ä ‚†±‚£ó‚¢≤‚†§‚†∂‚£∂‚£ò‚†ü  ‚¢Ä‚£æ‚£ø‚†á  "
           "\n ‚¢Ä‚£§ ‚†à‚†¢‚£Ä ‚†â‚†â‚†â‚†â‚†Å ‚¢Ä‚£†‚£æ‚°ø‚†ã   "
           "\n  ‚†Å   ‚†∏‚°â‚°í‚†Ç ‚†¥‚°ñ‚¢∏‚†õ‚†ã‚†Å ‚††‚†¶  "
           "\n       ‚†â‚†Å   ‚†ò‚†ä         ";
}

void diplayMenu() {
    cout << endl
         << "\n.---------------------."
            "\n||    -{ MENU }-     ||"
            "\n.---------------------."
            "\n| [1] Clasificaci√≥n   |"
            "\n|     de aguacates ü•ë |"
            "\n|           [2] Salir |"
            "\n.---------------------.\n";
}

void endTitle() {
    cout << "\n  ^~^  , * ------------- *"
            "\n ('Y') ) |  Hasta luego! | "
            "\n /   \\/  * ------------- *"
            "\n(\\|||/)        FIN      \n";
}

void diplayState() {
    cout << endl
         << "\n.------------------."
            "\n||  -[ Estado ]-  ||"
            "\n.------------------."
            "\n|      [0] q0      |"
            "\n|      [1] q1      |"
            "\n|      [2] q2      |"
            "\n|      [3] q3      |"
            "\n|      [4] q4      |"
            "\n|      [5] q5      |"
            "\n.------------------.\n";
}

void diplayClassification() {
    cout << endl
         << "\n.-------------------------."
            "\n||  -[ Clasificaci√≥n ]-  ||"
            "\n.-------------------------."
            "\n|   [1] ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ Premium    |"
            "\n|   [2] ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ Est√°ndar   |"
            "\n.------------------------.\n";
}

void diplayQualityDiscard() {
    cout << endl
         << "\n.-------------------."
            "\n||  -[ Calidad ]-  ||"
            "\n.-------------------."
            "\n| [2] Peso Bajo     |"
            "\n| [3] Descarte      |"
            "\n.-------------------.\n";
}

void diplayQualityWeights() {
    cout << endl
         << "\n.-------------------."
            "\n||  -[ Calidad ]-  ||"
            "\n.-------------------."
            "\n| [1] Peso Alto     |"
            "\n| [2] Peso Bajo     |"
            "\n.-------------------.\n";
}

void getAvocado() {
    int classification, quality, state, initialState;

    cout << endl << "Ingrese estado inicial: ";
    diplayState();
    while (!((cin >> state) && (state >= 0 && state <= 5))) {
        cin.clear();
        cin.ignore();
    }

    initialState = state;

    switch (state) {
        case 0: {
            cout << endl << "Ingrese la clasificaci√≥n del aguacate: ";
            diplayClassification();
            while (!((cin >> classification) &&
                     (classification >= 1 && classification <= 3))) {
                cin.clear();
                cin.ignore();
            }

            switch (classification) {
                case 1:
                    state = 1;
                    break;

                case 2:
                    state = 2;
                    break;

                default:
                    cout << endl
                         << "[!] Error: calidad inv√°lida para trancisi√≥n"
                         << endl;
                    break;
            }
        } break;

        case 1: {
            cout << endl << "Ingrese la calidad del aguacate: ";
            diplayQualityWeights();
            while (!((cin >> quality) && (quality >= 1 && quality <= 2))) {
                cin.clear();
                cin.ignore();
            }

            switch (quality) {
                case 1:
                    state = 3;
                    break;

                case 2:
                    state = 4;
                    break;

                default:
                    break;
            }
        } break;

        case 2: {
            cout << endl << "Ingrese la calidad del aguacate: ";
            diplayQualityDiscard();
            while (!((cin >> quality) && (quality >= 2 && quality <= 3))) {
                cin.clear();
                cin.ignore();
            }

            switch (quality) {
                case 2:
                    state = 4;
                    break;

                case 3:
                    state = 5;
                    break;

                default:
                    break;
            }
            break;
        }

        case 3: {
            cout << endl << "Ingrese la calidad del aguacate: ";
            diplayQualityWeights();
            while (!((cin >> quality) && (quality >= 2 && quality <= 2))) {
                cin.clear();
                cin.ignore();
            }

            switch (quality) {
                case 2:
                    state = 4;
                    break;

                default:
                    cout << endl
                         << "[!] Error: calidad inv√°lida para trancisi√≥n"
                         << endl;
                    break;
            }
        } break;

        case 4: {
            cout << endl << "Ingrese la calidad del aguacate: ";
            diplayQualityDiscard();
            while (!((cin >> quality) && (quality >= 3 && quality <= 3))) {
                cin.clear();
                cin.ignore();
            }

            switch (quality) {
                case 3:
                    state = 5;
                    break;

                default:
                    cout << endl
                         << "[!] Error: calidad inv√°lida para trancisi√≥n"
                         << endl;
                    break;
            }
        } break;

        case 5: {
            cout << endl << "Ingrese la calidad del aguacate: ";
            diplayQualityWeights();
            while (!((cin >> quality) && (quality >= 2 && quality <= 2))) {
                cin.clear();
                cin.ignore();
            }

            switch (quality) {
                case 2:
                    state = 4;
                    break;

                default:
                    cout << endl
                         << "[!] Error: calidad inv√°lida para trancisi√≥n"
                         << endl;
                    break;
            }
        } break;

        default:
            cout << endl
                 << "[!] Error: uno o m√°s estados ingresados son inv√°lidos"
                 << endl;
            break;
    }

    cout << endl << "Estado Resultado: q" << state;
    cout << endl << "Reporte Estado: ";

    if (state == 5) {
        cout << "): Descarte" << endl;
    } else if (classification == 1) {
        cout << "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ Premium" << endl;
    } else if (classification == 2) {
        cout << "‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ Est√°ndar" << endl;
    }

    cout << "Œ¥(q" << initialState << ", " << classification << ") = q" << state
         << ": Aguacate ";

    if (state == 5) {
        cout << "): Descarte" << endl;
    } else if (classification == 1) {
        cout << "Premium" << endl;
    } else if (classification == 2) {
        cout << "Est√°ndar" << endl;
    }
}

int main() {
    /* ------------------------- Variables ------------------------- */
    /* - Menu - */
    int userChoice;
    bool run = true;

    /* --------------------------- Code ---------------------------- */
    while (run == true) {
        displayAguacate();
        diplayMenu();
        while (!((cin >> userChoice) && (userChoice >= 1 && userChoice <= 2))) {
            cin.clear();
            cin.ignore();
        }

        switch (userChoice) {
            case 1:
                getAvocado();
                break;

            case 2:
                endTitle();
                run = false;
                break;
        }
    }

    return 0;
}